service: serverless-training

provider:
  name: aws
  runtime: nodejs16.x
  timeout: 300
  apiGateway:
    apiKeys:
      - serverless-training-apikey
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:us-east-1:000000000000:table/usersTable
        - Effect: Allow
          Action: "s3:*"
          Resource: arn:aws:s3:::serverless-training-storage/*
  environment:
    S3_BUCKET_NAME: serverless-training-storage
    SECRET_EGG: MySecret

plugins:
  - serverless-offline
  - serverless-dynamodb
  - serverless-localstack

package:
  individually: true
  patterns:
    - "!*/**"

custom:
  localstack:
    stages:
      - dev
    host: http://localhost
    edgePort: 4566
    autostart: true
    networks:
      - host
      - overlay
    lambda:
      mountCode: True
    docker:
      sudo: False
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.js"
  get-users:
    handler: getusers/handler.getUsers
    package:
      patterns:
        - "getusers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.11
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signed-url
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: serverless-training-storage
          event: s3:ObjectCreated:*
          existing: true
          rules:
           - prefix: upload/

layers:
  base: 
    name: "prod-dependencies"
    compatibleRuntimes:
      - "nodejs16.x"
    package:
      artifact: app/nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: PublicRead
        BucketName: serverless-training-storage
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
